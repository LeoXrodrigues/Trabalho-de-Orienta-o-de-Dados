import { Request, Response } from 'express';
import { PlanningService } from './planning.service';

export class PlanningController {
  private planningService: PlanningService;

  constructor(planningService: PlanningService) {
    this.planningService = planningService;
  }

  /**
   * POST /planning/plan-next
   * Endpoint principal: executa o planejamento inteligente do pr√≥ximo despacho
   */
  async planNextShipment(req: Request, res: Response): Promise<void> {
    try {
      const result = await this.planningService.planNextShipment();

      if (result.success) {
        res.status(200).json({
          message: result.message,
          data: {
            plannedShipments: result.plannedShipments,
            assignedVehicle: result.assignedVehicle,
            route: {
              path: result.plannedRoute,
              totalDistance: result.totalDistance,
              estimatedDuration: result.estimatedDuration
            },
            efficiency: result.efficiency
          },
          analytics: {
            shipmentsCount: result.plannedShipments.length,
            totalWeight: result.plannedShipments.reduce((sum, s) => sum + s.weightKg, 0),
            averagePriority: result.plannedShipments.reduce((sum, s) => sum + s.priority, 0) / result.plannedShipments.length,
            vehicleUtilization: result.assignedVehicle ? 
              (result.plannedShipments.reduce((sum, s) => sum + s.weightKg, 0) / result.assignedVehicle.capacityKg * 100).toFixed(1) + '%' 
              : '0%'
          }
        });
      } else {
        res.status(400).json({
          message: result.message,
          success: false
        });
      }
    } catch (error) {
      res.status(500).json({
        error: error instanceof Error ? error.message : 'Erro interno no planejamento',
        success: false
      });
    }
  }

  /**
   * GET /planning/analysis
   * Fornece an√°lise detalhada do estado atual do sistema
   */
  async analyzePlanningState(req: Request, res: Response): Promise<void> {
    try {
      const analysis = await this.planningService.analyzePlanningState();

      res.status(200).json({
        message: 'An√°lise do estado do planejamento',
        data: analysis,
        insights: this.generateInsights(analysis)
      });
    } catch (error) {
      res.status(500).json({
        error: error instanceof Error ? error.message : 'Erro ao analisar estado do planejamento'
      });
    }
  }

  /**
   * POST /planning/cancel
   * Cancela um planejamento em andamento
   */
  async cancelPlanning(req: Request, res: Response): Promise<void> {
    try {
      const { shipmentIds } = req.body;

      if (!shipmentIds || !Array.isArray(shipmentIds) || shipmentIds.length === 0) {
        res.status(400).json({
          error: 'Campo "shipmentIds" √© obrigat√≥rio e deve ser um array n√£o vazio'
        });
        return;
      }

      await this.planningService.cancelPlanning(shipmentIds);

      res.status(200).json({
        message: `Planejamento cancelado para ${shipmentIds.length} entregas`,
        cancelledShipments: shipmentIds
      });
    } catch (error) {
      res.status(500).json({
        error: error instanceof Error ? error.message : 'Erro ao cancelar planejamento'
      });
    }
  }

  /**
   * POST /planning/complete/:shipmentId
   * Marca uma entrega como finalizada
   */
  async completeShipment(req: Request, res: Response): Promise<void> {
    try {
      const { shipmentId } = req.params;

      if (!shipmentId) {
        res.status(400).json({
          error: 'ID da entrega √© obrigat√≥rio'
        });
        return;
      }

      await this.planningService.completeShipment(shipmentId);

      res.status(200).json({
        message: 'Entrega marcada como finalizada',
        shipmentId
      });
    } catch (error) {
      res.status(400).json({
        error: error instanceof Error ? error.message : 'Erro ao finalizar entrega'
      });
    }
  }

  /**
   * GET /planning/demonstrate-structures
   * Endpoint especial para demonstrar o uso das estruturas de dados
   */
  async demonstrateDataStructures(req: Request, res: Response): Promise<void> {
    try {
      const analysis = await this.planningService.analyzePlanningState();

      // Demonstra cada estrutura de dados em a√ß√£o
      const demonstration = {
        message: 'Demonstra√ß√£o das Estruturas de Dados do Sistema',
        structures: {
          priorityQueue: {
            description: 'Fila de Prioridade (Min-Heap)',
            usage: 'Usada no ShipmentPlanner para agrupar entregas hierarquicamente',
            demonstration: 'Entregas s√£o inseridas na fila com base na prioridade (1=alta, 5=baixa), peso e efici√™ncia de agrupamento',
            currentState: `${analysis.totalPendingShipments} entregas pendentes aguardando processamento na fila`
          },
          binaryTree: {
            description: '√Årvore Bin√°ria de Agrupamento',
            usage: 'Representa hierarquicamente os lotes √≥timos de entregas',
            demonstration: 'Cada n√≥ folha = 1 entrega, n√≥s internos = lotes agrupados',
            currentState: analysis.groupingTreeStats
          },
          graph: {
            description: 'Grafo com Algoritmo de Dijkstra',
            usage: 'Calcula rotas √≥timas entre localidades usando menor dist√¢ncia',
            demonstration: 'Cada localidade = n√≥, cada estrada = aresta com peso (dist√¢ncia)',
            currentState: 'Grafo constru√≠do dinamicamente a partir das localidades e estradas cadastradas'
          }
        },
        algorithmicFlow: {
          step1: 'Entregas pendentes ‚Üí Fila de Prioridade (ordena√ß√£o por urg√™ncia)',
          step2: 'Fila de Prioridade ‚Üí √Årvore Bin√°ria (agrupamento hier√°rquico)',
          step3: '√Årvore Bin√°ria ‚Üí Sele√ß√£o do lote √≥timo (baseado em capacidade do ve√≠culo)',
          step4: 'Lote selecionado ‚Üí Grafo (c√°lculo da rota √≥tima)',
          step5: 'Rota calculada ‚Üí Execu√ß√£o do plano (atualiza√ß√£o do banco de dados)'
        },
        recommendedBatches: analysis.recommendedBatches
      };

      res.status(200).json(demonstration);
    } catch (error) {
      res.status(500).json({
        error: error instanceof Error ? error.message : 'Erro na demonstra√ß√£o das estruturas'
      });
    }
  }

  /**
   * GET /planning/health
   * Verifica a sa√∫de do sistema de planejamento
   */
  async checkPlanningHealth(req: Request, res: Response): Promise<void> {
    try {
      const analysis = await this.planningService.analyzePlanningState();
      
      const health = {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        metrics: {
          pendingShipments: analysis.totalPendingShipments,
          availableVehicles: analysis.availableVehicles,
          canPlan: analysis.totalPendingShipments > 0 && analysis.availableVehicles > 0,
          averageEfficiency: analysis.recommendedBatches.length > 0 ? 
            (analysis.recommendedBatches.reduce((sum, b) => sum + b.efficiency, 0) / analysis.recommendedBatches.length).toFixed(3) : 0
        },
        warnings: []
      };

      // Adiciona avisos baseados no estado
      if (analysis.totalPendingShipments === 0) {
        health.warnings.push('N√£o h√° entregas pendentes');
      }
      
      if (analysis.availableVehicles === 0) {
        health.warnings.push('N√£o h√° ve√≠culos dispon√≠veis');
        health.status = 'warning';
      }

      if (analysis.recommendedBatches.length === 0 && analysis.totalPendingShipments > 0) {
        health.warnings.push('N√£o foi poss√≠vel gerar estrat√©gias de despacho vi√°veis');
        health.status = 'warning';
      }

      res.status(200).json(health);
    } catch (error) {
      res.status(500).json({
        status: 'unhealthy',
        error: error instanceof Error ? error.message : 'Erro ao verificar sa√∫de do sistema',
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Gera insights baseados na an√°lise do planejamento
   */
  private generateInsights(analysis: any): string[] {
    const insights: string[] = [];

    if (analysis.totalPendingShipments === 0) {
      insights.push('‚úÖ Todas as entregas foram processadas');
    } else if (analysis.totalPendingShipments > 0 && analysis.availableVehicles === 0) {
      insights.push('‚ö†Ô∏è H√° entregas pendentes mas nenhum ve√≠culo dispon√≠vel');
    } else if (analysis.recommendedBatches.length > 0) {
      const bestBatch = analysis.recommendedBatches[0];
      insights.push(`üöö Melhor estrat√©gia: ${bestBatch.description} (Efici√™ncia: ${(bestBatch.efficiency * 100).toFixed(1)}%)`);
    }

    if (analysis.groupingTreeStats.averagePriority < 2.0) {
      insights.push('üî• Alta concentra√ß√£o de entregas urgentes (prioridade < 2.0)');
    }

    if (analysis.groupingTreeStats.totalWeight > 10000) {
      insights.push('üì¶ Grande volume de carga aguardando despacho');
    }

    return insights;
  }
} 